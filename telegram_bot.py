import asyncio
import json

import aiogram.types.input_media

import config
import logging

from aiogram import Bot, Dispatcher, executor, types
from sql_db import SQL
from krisha_kz import new_appartments, download_image, update_lastkey, parse, remove_image

logging.basicConfig(level=logging.INFO)

bot = Bot(token=config.API_TOKEN)
dp = Dispatcher(bot)

db = SQL('db.db')

@dp.message_handler(commands=['subscribe'])
async def subscribe(message: types.Message):
    if not db.subscriber_exists(message.from_user.id):
        # –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        db.add_subscriber(message.from_user.id)
    else:
        db.update_subscription(message.from_user.id, True)

    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É \n–ñ–¥–∏—Ç–µ, —Å–∫–æ—Ä–æ –≤—ã–π–¥—É—Ç –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")


# –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø–∏—Å–∫–∏
@dp.message_handler(commands=['subscribe'])
async def unsubscribe(message: types.Message):
    if not db.subscriber_exists(message.from_user.id):
        # –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        db.add_subscriber(message.from_user.id, False)
        await message.answer("–í—ã –∏—Ç–∞–∫ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã")
    else:
        db.update_subscription(message.from_user.id, False)
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å")

    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É \n–ñ–¥–∏—Ç–µ, —Å–∫–æ—Ä–æ –≤—ã–π–¥—É—Ç –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")


@dp.message_handler(commands=['region'])
async def region(message: types.Message):
    btn_1 = types.InlineKeyboardButton("–ê–ª–º–∞–ª–∏–Ω—Å–∫–∏–π", callback_data='btn_ALM')
    btn_2 = types.InlineKeyboardButton("–ú–µ–¥–µ—É—Å–∫–∏–π", callback_data='btn_MED')
    btn_3 = types.InlineKeyboardButton("–ë–æ—Å—Ç–∞–Ω–¥—ã–∫—Å–∫–∏–π", callback_data='btn_BOS')
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(btn_1).add(btn_2).add(btn_3)
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω: ", reply_markup=kb)


@dp.callback_query_handler(text_contains='btn_')
async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
    print(callback_query)
    code = callback_query.data[-1]
    print(code)
    if code == "ALM":
        await bot.answer_callback_query(callback_query.id, text='–ù–∞–∂–∞—Ç–∞ –≤—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞')
    elif code == "MED":
        await bot.answer_callback_query(
            callback_query.id,
            text='–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º 5.\n–ê —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤ üòâ', show_alert=True)
    else:
        await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, f'–ù–∞–∂–∞—Ç–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞! code={code}')

# –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –∏–≥—Ä –∏ –¥–µ–ª–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫–∏
async def scheduled(wait_for):

    while True:
        await asyncio.sleep(wait_for)

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –∫–≤
        new_houses = new_appartments('lastkey.txt')
        if new_houses:
            # –µ—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –µ—Å—Ç—å, –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏ –∏—Ç–µ—Ä–∏—Ä—É–µ–º
            # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –±–æ—Ç–∞
            subscriptions = db.get_subscriptions()
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –Ω–æ–≤–æ—Å—Ç—å

            print('start')

            for s in subscriptions:
                media = types.MediaGroup()
                for i in new_houses["images"][:9]:
                    media.attach_photo(types.InputFile(download_image(i)))
                bot_msg = await bot.send_photo(
                    s[1],
                    types.InputFile(download_image(new_houses['image'])),
                    caption=new_houses['title'] + "\n\n"
                        "<b>–ê–¥—Ä–µ—Å:</b> " + new_houses['subtitle'] + "\n"
                        "<b>–î–æ–º:</b> " + new_houses['building'] +"\n"
                        "<b>–ë–∞–ª–∫–æ–Ω:</b> " + new_houses['balcony'] +"\n"
                        "<b>–ü–ª–æ—â–∞–¥—å:</b> " + new_houses['square'] + "\n"
                        "<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> " + new_houses['preview'] + "\n\n"
                        "<b>–•–æ–∑—è–∏–Ω/—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:</b> " + new_houses['owner'] + "\n"
                        "<b>–¶–µ–Ω–∞:</b> " + new_houses['price'] + "\n\n"
                        "<b>–°—Å—ã–ª–∫–∞:</b> " + new_houses['link'] + "\n" +
                        "<b>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω:</b> " + new_houses['created_at'] + "\n\n"
                    ,
                    disable_notification=True,
                    parse_mode='html'
                )
                await bot.send_media_group(
                    s[1],
                    media=media,
                    reply_to_message_id=bot_msg.message_id
                )

            update_lastkey(new_houses['href'].split("/")[3], 'lastkey.txt')

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(scheduled(60))
    executor.start_polling(dp, skip_updates=True)



